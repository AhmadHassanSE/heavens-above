name: Deployment Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  NODE_VERSION: '18.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      docker-image: ${{ steps.build.outputs.image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Check package.json scripts
      id: check_scripts
      run: |
        echo "🔍 Checking available scripts..."
        npm run
        if npm run | grep -q " test"; then
          echo "has_test_script=true" >> $GITHUB_OUTPUT
        else
          echo "has_test_script=false" >> $GITHUB_OUTPUT
        fi
        if npm run | grep -q " build"; then
          echo "has_build_script=true" >> $GITHUB_OUTPUT
        else
          echo "has_build_script=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Install dependencies
      run: npm install
      
    - name: Run tests (if available)
      if: steps.check_scripts.outputs.has_test_script == 'true'
      run: npm test
      
    - name: Skip tests (if not available)
      if: steps.check_scripts.outputs.has_test_script == 'false'
      run: echo "⚠️ No test script found in package.json, skipping tests"
      
    - name: Build application (if available)
      if: steps.check_scripts.outputs.has_build_script == 'true'
      run: npm run build
      
    - name: Skip build (if not available)
      if: steps.check_scripts.outputs.has_build_script == 'false'
      run: echo "⚠️ No build script found, skipping build step"
      
    - name: Create basic build output
      if: steps.check_scripts.outputs.has_build_script == 'false'
      run: |
        echo "📁 Creating basic project structure..."
        mkdir -p dist
        echo "# Heavens Above Project" > dist/README.md
        echo "Built on $(date)" >> dist/README.md
        
    - name: Build Docker image
      id: build
      run: |
        # Check if Dockerfile exists, if not create a simple one
        if [ ! -f "Dockerfile" ]; then
          echo "🐳 Creating basic Dockerfile..."
          cat > Dockerfile << EOF
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["node", "server.js"]
EOF
        fi
        docker build -t heavens-above:${{ github.sha }} .
        echo "image=heavens-above:${{ github.sha }}" >> $GITHUB_OUTPUT
        
    - name: Save Docker image
      run: docker save heavens-above:${{ github.sha }} -o heavens-above.tar
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: heavens-above-docker-image
        path: heavens-above.tar
        
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: staging
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: heavens-above-docker-image
        
    - name: Load Docker image
      run: docker load -i heavens-above.tar
      
    - name: Deploy to staging simulation
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: heavens-above:${{ needs.build-and-test.outputs.docker-image }}"
        echo "Deployment simulation completed successfully"
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: heavens-above-docker-image
        
    - name: Load Docker image
      run: docker load -i heavens-above.tar
      
    - name: Deploy to production simulation
      run: |
        echo "🎯 Deploying to production environment..."
        echo "Image: heavens-above:${{ needs.build-and-test.outputs.docker-image }}"
        echo "Production deployment simulation completed successfully"
