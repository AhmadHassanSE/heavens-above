name: Code Review Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:

jobs:
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm install
    
    - name: Check for test script
      id: check-tests
      run: |
        if npm run | grep -q " test"; then
          echo "tests_available=true" >> $GITHUB_OUTPUT
        else
          echo "tests_available=false" >> $GITHUB_OUTPUT
          echo "⚠️ No test script found in package.json"
        fi
    
    - name: Run tests
      if: steps.check-tests.outputs.tests_available == 'true'
      run: npm test
    
    - name: Skip tests
      if: steps.check-tests.outputs.tests_available == 'false'
      run: echo "Skipping tests - no test script configured"
    
    - name: Check for lint script
      id: check-lint
      run: |
        if npm run | grep -q " lint"; then
          echo "lint_available=true" >> $GITHUB_OUTPUT
        else
          echo "lint_available=false" >> $GITHUB_OUTPUT
          echo "⚠️ No lint script found in package.json"
        fi
    
    - name: Run linting
      if: steps.check-lint.outputs.lint_available == 'true'
      run: npm run lint
    
    - name: Skip linting
      if: steps.check-lint.outputs.lint_available == 'false'
      run: echo "Skipping linting - no lint script configured"
    
    - name: Check code complexity
      run: |
        echo "📊 Code Complexity Analysis"
        echo "=========================="
        # Simple complexity check - count lines in files
        echo "File sizes:"
        find src/ -name "*.js" -exec wc -l {} \; | sort -nr | head -10 || echo "No src files found"
        echo ""
        echo "Largest files (watch for potential refactoring needs):"
        find . -name "*.js" -not -path "./node_modules/*" -exec wc -l {} \; | sort -nr | head -5

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run security audit
      run: |
        echo "Running security scan..."
        npm audit --audit-level high || echo "Security scan completed with findings"
    
    - name: Check for sensitive data
      run: |
        echo "Checking for potential sensitive data..."
        # Basic check for common sensitive patterns
        grep -r "password\|secret\|key\|token" --include="*.js" --include="*.json" . || echo "No obvious sensitive data patterns found"

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [code-analysis, security-scan]
    
    steps:
    - name: Generate quality report
      run: |
        echo "# Code Quality Report" > quality-report.md
        echo "## Pull Request: ${{ github.event.pull_request.title }}" >> quality-report.md
        echo "### Branch: ${{ github.head_ref }}" >> quality-report.md
        echo "" >> quality-report.md
        echo "## Quality Checks:" >> quality-report.md
        echo "- Tests must pass" >> quality-report.md
        echo "- Linting must pass" >> quality-report.md  
        echo "- Security audit completed" >> quality-report.md
        echo "- No sensitive data detected" >> quality-report.md
        echo "" >> quality-report.md
        echo "## Next Steps:" >> quality-report.md
        echo "1. Review test results above" >> quality-report.md
        echo "2. Check linting output for code style issues" >> quality-report.md
        echo "3. Verify security audit findings" >> quality-report.md
        echo "4. Ensure all checks pass before merging" >> quality-report.md
        echo "" >> quality-report.md
        echo "*This report was automatically generated*"
    
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report
        path: quality-report.md
        retention-days: 30

  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Check changed files
      run: |
        echo "📊 PR Size Analysis"
        echo "=================="
        echo "Checking the size of this pull request..."
        echo "Note: For large PRs, consider breaking into smaller changes"
        echo "This helps with code review and maintainability"
